const icons = {
  sultanbulb: `<path d="M22.3035196,5.39750357 C23.8285196,6.79950357 22.4405196,9.38250357 21.9745196,10.3045036 C20.7175196,10.6705036 18.7055196,10.9995036 15.9995196,10.9995036 C13.2935196,10.9995036 11.2825196,10.6705036 10.0255196,10.3045036 C9.55951963,9.38250357 8.17051963,6.79950357 9.69651963,5.39750357 C11.3275196,3.89850357 15.7245196,4.00150357 15.9995196,4.00150357 C16.2755196,4.00150357 20.6715196,3.89850357 22.3035196,5.39750357 Z M15.9998196,11.9991036 C17.5228196,11.9991036 19.7458196,11.8561036 21.5388196,11.4461036 C20.1808196,15.6651036 19.9478196,19.5241036 19.9938196,20.6221036 C20.0048196,20.8771036 19.9178196,21.1181036 19.7518196,21.3111036 L19.3108196,21.8151036 C18.3588196,21.9281036 17.2558196,21.9991036 15.9998196,21.9991036 C14.7438196,21.9991036 13.6408196,21.9281036 12.6888196,21.8151036 L12.2478196,21.3111036 C12.0818196,21.1181036 11.9948196,20.8771036 12.0058196,20.6221036 C12.0518196,19.5241036 11.8188196,15.6651036 10.4608196,11.4461036 C12.2538196,11.8561036 14.4768196,11.9991036 15.9998196,11.9991036 Z M13.0018196,22.8614036 C14.0438196,22.9624036 15.1898196,22.9994036 16.0038196,22.9994036 C16.8178196,22.9994036 17.9638196,22.9624036 19.0058196,22.8614036 L18.5048196,25.9694036 C18.4788196,26.1874036 18.3728196,26.3894036 18.2048196,26.5424036 L17.7378196,26.9664036 C17.7058196,26.9954036 17.6768196,27.0264036 17.6488196,27.0584036 L17.1558196,27.6414036 C16.9658196,27.8674036 16.6758196,27.9994036 16.3688196,27.9994036 L16.0038196,27.9994036 L15.6388196,27.9994036 C15.3318196,27.9994036 15.0428196,27.8674036 14.8528196,27.6414036 L14.3578196,27.0584036 C14.3308196,27.0264036 14.3018196,26.9954036 14.2708196,26.9664036 L13.8038196,26.5424036 C13.6358196,26.3894036 13.5288196,26.1874036 13.5028196,25.9694036 L13.0018196,22.8614036 Z"></path>`,
  ceilingsquare: `<path d="M23.802,18.22975 L16.632,20.88375 C16.223,21.03675 15.778,21.03675 15.368,20.88375 L8.198,18.22975 C7.932,18.13075 7.935,17.72075 8.202,17.62675 L15.397,15.11075 C15.789,14.97175 16.211,14.97175 16.604,15.11075 L23.798,17.62675 C24.066,17.72075 24.069,18.13075 23.802,18.22975 M27.471,13.25875 L16.631,9.11775 C16.222,8.96075 15.779,8.96075 15.369,9.11775 L4.53,13.25875 C4.214,13.37875 4,13.73375 4,14.13475 L4,17.84775 C4,18.24975 4.214,18.60375 4.53,18.72375 L15.369,22.88275 C15.779,23.03975 16.222,23.03975 16.631,22.88275 L27.471,18.72375 C27.786,18.60375 28,18.24975 28,17.84775 L28,14.13475 C28,13.73375 27.786,13.37875 27.471,13.25875"></path>`,
  flexiblelamp: `<path d="M22.861065,9.736 C24.760065,9.098 25.128065,9.618 23.639065,10.921 C22.130065,12.241 19.323065,13.834 17.413065,14.454 C15.530065,15.066 15.269065,14.486 16.789065,13.183 C18.287065,11.897 20.988065,10.365 22.861065,9.736 M17.045065,16.714 C19.783065,15.956 23.716065,13.722 25.768065,11.762 C26.806065,10.771 27.146065,10.054 26.869065,9.694 C24.920065,6.49 21.067065,5.17 17.880065,6.537 C17.927065,6.365 17.962065,6.187 17.962065,6 C17.962065,4.895 17.066065,4 15.962065,4 C14.857065,4 13.962065,4.895 13.962065,6 C13.962065,6.983 14.673065,7.797 15.609065,7.965 L6.29706497,16.884 C6.11006497,17.063 6.00306497,17.31 6.00006497,17.568 C5.99706497,17.827 6.09806497,18.076 6.28206497,18.258 L12.218065,24.195 C11.663065,24.276 11.131065,24.376 10.668065,24.508 C9.69306497,24.79 9.14106497,25.138 8.99906497,25.499 C8.97306497,25.558 8.96206497,25.623 8.96206497,25.686 L8.96206497,26.311 C8.96206497,26.375 8.97306497,26.435 8.99906497,26.499 C9.14506497,26.874 9.73806497,27.234 10.769065,27.519 C13.094065,28.16 16.822065,28.16 19.150065,27.519 C20.181065,27.234 20.778065,26.874 20.924065,26.499 C20.950065,26.435 20.962065,26.375 20.962065,26.311 L20.962065,25.686 C20.962065,25.623 20.950065,25.558 20.924065,25.499 C20.782065,25.138 20.230065,24.79 19.259065,24.508 C18.025065,24.154 16.378065,23.989 14.748065,24.006 L8.33706497,17.593 L13.818065,12.342 C13.704065,13.75 13.979065,15.225 14.696065,16.589 C14.855065,17.021 15.647065,17.101 17.045065,16.714"></path>`,
  huelightstrip: `<path d="M8.4395,16.668 C8.9795,16.552 9.5115,16.895 9.6285,17.435 C9.7455,17.974 9.4025,18.506 8.8625,18.623 C8.3225,18.74 7.7905,18.397 7.6735,17.857 C7.5565,17.317 7.9005,16.785 8.4395,16.668 M13.3275,15.611 C13.8665,15.495 14.3985,15.838 14.5155,16.377 C14.6325,16.917 14.2895,17.449 13.7505,17.566 C13.2105,17.683 12.6775,17.34 12.5605,16.8 C12.4445,16.261 12.7875,15.729 13.3275,15.611 M18.2135,14.555 C18.7535,14.438 19.2865,14.781 19.4025,15.32 C19.5195,15.86 19.1765,16.393 18.6365,16.51 C18.0965,16.626 17.5645,16.283 17.4485,15.743 C17.3315,15.203 17.6735,14.671 18.2135,14.555 M23.1005,13.498 C23.6405,13.381 24.1725,13.724 24.2905,14.264 C24.4065,14.804 24.0635,15.336 23.5235,15.453 C22.9835,15.569 22.4515,15.227 22.3355,14.687 C22.2175,14.147 22.5615,13.614 23.1005,13.498 M10.6695,20.639 L25.4735,17.444 C26.5535,17.211 27.2405,16.147 27.0065,15.067 C26.4495,12.484 23.9035,10.842 21.3205,11.399 L6.5165,14.594 C5.4365,14.827 4.7505,15.891 4.9835,16.971 C5.5415,19.554 8.0865,21.196 10.6695,20.639 M25,26 C24.447,26 24,25.553 24,25 C24,24.447 24.447,24 25,24 C25.553,24 26,24.447 26,25 C26,25.553 25.553,26 25,26 M20,26 C19.447,26 19,25.553 19,25 C19,24.447 19.447,24 20,24 C20.553,24 21,24.447 21,25 C21,25.553 20.553,26 20,26 M15,26 C14.447,26 14,25.553 14,25 C14,24.447 14.447,24 15,24 C15.553,24 16,24.447 16,25 C16,25.553 15.553,26 15,26 M10,26 C9.447,26 9,25.553 9,25 C9,24.447 9.447,24 10,24 C10.553,24 11,24.447 11,25 C11,25.553 10.553,26 10,26 M27,22 L9,22 C5,22 4,19 4,18 L4,23 C4,25.762 6.238,28 9,28 L27,28 C27.553,28 28,27.553 28,27 L28,23 C28,22.447 27.553,22 27,22 M22,8 C21.447,8 21,7.553 21,7 C21,6.447 21.447,6 22,6 C22.553,6 23,6.447 23,7 C23,7.553 22.553,8 22,8 M17,8 C16.447,8 16,7.553 16,7 C16,6.447 16.447,6 17,6 C17.553,6 18,6.447 18,7 C18,7.553 17.553,8 17,8 M12,8 C11.447,8 11,7.553 11,7 C11,6.447 11.447,6 12,6 C12.553,6 13,6.447 13,7 C13,7.553 12.553,8 12,8 M7,8 C6.447,8 6,7.553 6,7 C6,6.447 6.447,6 7,6 C7.553,6 8,6.447 8,7 C8,7.553 7.553,8 7,8 M23,4 L5,4 C4.447,4 4,4.447 4,5 L4,9 C4,9.553 4.447,10 5,10 L23,10 C27,10 28,13 28,14 L28,9 C28,6.238 25.762,4 23,4"></path>`,
  bed: `<path d="M26,16 L6,16 C3.791,16 2,17.791 2,20 L2,22 C2,22.553 2.447,23 3,23 L4,23 L4,24 C4,25.104 4.896,26 6,26 C7.104,26 8,25.104 8,24 L8,23 L24,23 L24,24 C24,25.104 24.896,26 26,26 C27.104,26 28,25.104 28,24 L28,23 L29,23 C29.553,23 30,22.553 30,22 L30,20 C30,17.791 28.209,16 26,16 M9,10 L14,10 C14.553,10 15,10.447 15,11 C15,11.553 14.553,12 14,12 L9,12 C8.447,12 8,11.553 8,11 C8,10.447 8.447,10 9,10 M18,10 L23,10 C23.553,10 24,10.447 24,11 C24,11.553 23.553,12 23,12 L18,12 C17.447,12 17,11.553 17,11 C17,10.447 17.447,10 18,10 M7.009,14 L24.991,14 C25.549,14 26,13.549 26,12.991 L26,8 C26,6.896 25.104,6 24,6 L8,6 C6.896,6 6,6.896 6,8 L6,12.991 C6,13.549 6.451,14 7.009,14"></path>`,
};

let allGroups = [];
let scenes = [];
let allLights = [];


doHTML("GET", res => {
  // in the res the lightstates arent represented

  // get the data for each individual scene
  Object.entries(res).forEach(scene => doHTML("GET", sceneRes => {
    
    if (sceneRes.type === "GroupScene") {
      const newScene = new Scene(scene[0], sceneRes);
      
      newScene.addToHtml("#scenes");

      scenes.push(newScene);
    }

  }, "scenes/" + scene[0]));
  

}, "scenes");

doHTML("GET", res => {

  Object.entries(res).forEach(light => {
    const newLight = new Light(light);

    newLight.addToHtml("#lights");

    allLights.push(newLight);
  });
  
}, "lights");

doHTML("GET", res => { // needs to be executed after lights, because they are reffered to
  // in the res the lightstates arent represented

  // get the data for each individual scene
  Object.entries(res).forEach(group => {

    const newGroup = new Group(group);
    
    newGroup.addToHtml("#zones");

    allGroups.push(newGroup);
    
  });

}, "groups");


function doHTML(command, content, urlAddition = "") {
  if (window.XMLHttpRequest) {
    const http = new XMLHttpRequest();

    http.open(command, `http://${env.ipAdress}/api/${env.key}/${urlAddition}`, true);

    switch (command) {
      case "GET":
        http.send(null);

        http.onreadystatechange = () => {
          if (http.readyState === 4) {
            if (http.status === 200) {
              content(JSON.parse(http.responseText));
            } else {
              console.log("Error " + http.status);
            }
          }
        };
        break;
      case "PUT":
        http.send(content);
      
        http.onreadystatechange = () => {
          if (http.readyState === 4) {
            if (http.status === 200) {
              // console.log(http.responseText);
            } else {
              console.log("Error " + http.status);
            }
          }
        };
        break;
    }
  }
}
